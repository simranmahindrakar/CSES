#include <iostream>
#include <bits/stdc++.h>
using namespace std;
int main()
{
    int mod = 1000000007;
    int numCoins, amount;
    
    cin>>numCoins>>amount;
    int coins[numCoins];
    for (int i=0; i<numCoins; i++) {
        cin>>coins[i];
    }
    vector<int> dp(amount+2,0);
    dp[0] = 1; //base case
    for(int i=1; i<=amount; i++)
    {
        for(int j=0; j<numCoins; j++)
        {
            if((i-coins[j])>=0)
             {
            (dp[i] += dp[i-coins[j]]) %= mod; 
              }
        }
    }
    cout<<dp[amount]<<endl;
}

State of dp is:
dp[i] = no. of distinct ways you can get sum i using the given coins
Smaple input. Target = "sum" Coin denominations: c1, c2, c3.
Imagine you are just one more coin away from reaching your target. That means adding the value of any one of the given coins c1, c2, c3 will give you the required sum.
Where could you be possible standing?
either at (sum-c1), (sum-c2) or (sum-c3)
In other words - 
no. of ways to get "sum" = no. of ways to get (sum-c1) + no. of ways to get (sum-c2) + no. of ways to get (sum-c3).
dp[i] = dp[i-c1] + dp[i-c2] + dp[i-c3]  
Here the base case is dp[0] = 0
